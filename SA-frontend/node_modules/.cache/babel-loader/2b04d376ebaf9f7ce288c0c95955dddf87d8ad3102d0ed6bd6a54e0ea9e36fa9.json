{"ast":null,"code":"var _jsxFileName = \"/Users/dheyhasan/spotify-analyzer/SA-frontend/src/pages/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { fetchPlaylists, fetchPlaylistTracks } from \"../api/spotify.js\";\nimport Header from \"../components/Header.js\";\n\n// every thing above is just impot not need to explin */\n\n// Ceate Dashboard function as arrow functions  */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  // Create couple of varibale and assign them to useState which mean date need to be track in the app\n\n  const [playlists, setPlaylists] = useState([]);\n  const [selectedTracks, setSelectedTracks] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n\n  // useNavigate is a hook that allows you to move to other pages\n\n  const navigate = useNavigate();\n\n  // useEffect is a hook that allows you to run side effects in your component\n\n  // The empty array means this effect will only run once when the component mounts\n\n  // The function fetchPlaylists is called to get the playlists from the Spotify API\n\n  // The token is stored in localStorage and is used to authenticate the request\n\n  // If the token is not found, a warning is logged and loaded is set to true\n\n  // If the token is found, the playlists are fetched and set in the state\n\n  // If there is an error, it is logged and loaded is set to true\n\n  useEffect(() => {\n    // This is a side effect that runs when the component mounts\n\n    const token = localStorage.getItem(\"spotifyAccessToken\");\n    if (token) {\n      fetchPlaylists(token).then(data => {\n        setPlaylists(data);\n        setLoaded(true);\n      }).catch(err => {\n        console.error(\"Error fetching playlists:\", err);\n        setLoaded(true);\n      });\n    } else {\n      console.warn(\"No token found\");\n      setLoaded(true);\n    }\n  }, []);\n  const handleSelect = async playlistId => {\n    const token = localStorage.getItem(\"spotifyAccessToken\");\n    if (!token) return;\n    try {\n      const tracks = await fetchPlaylistTracks(token, playlistId);\n      setSelectedTracks(tracks);\n      const response = await fetch(\"http://localhost:8000/analyze\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(tracks.map(t => ({\n          name: t.name,\n          duration_ms: t.duration_ms,\n          popularity: t.popularity\n        })))\n      });\n      const analysisData = await response.json();\n      console.log(\"ANALYSIS DATA FROM BACKEND:\", analysisData);\n      navigate(\"/analysis\", {\n        state: {\n          analysisData,\n          selectedTracks: tracks\n        }\n      });\n    } catch (err) {\n      console.error(\"Error fetching tracks or analyzing:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold\",\n        children: \"Your Spotify Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2\",\n        children: \"Here you can view and analyze your playlists.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 mt-4\",\n        children: playlists.map(pl => {\n          var _pl$images, _pl$images$;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border rounded-lg overflow-hidden shadow hover:shadow-lg cursor-pointer\",\n            onClick: () => {\n              console.log(\"Clicked playlist:\", pl.name);\n              handleSelect(pl.id);\n            },\n            children: [((_pl$images = pl.images) === null || _pl$images === void 0 ? void 0 : (_pl$images$ = _pl$images[0]) === null || _pl$images$ === void 0 ? void 0 : _pl$images$.url) && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pl.images[0].url,\n              alt: pl.name,\n              className: \"w-full h-40 object-cover\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2\",\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"font-semibold text-sm\",\n                children: pl.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)]\n          }, pl.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Dashboard, \"crly5mo9ibay2lLVuSzmaIUef5s=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","fetchPlaylists","fetchPlaylistTracks","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","playlists","setPlaylists","selectedTracks","setSelectedTracks","loaded","setLoaded","navigate","token","localStorage","getItem","then","data","catch","err","console","error","warn","handleSelect","playlistId","tracks","response","fetch","method","headers","body","JSON","stringify","map","t","name","duration_ms","popularity","analysisData","json","log","state","children","fileName","_jsxFileName","lineNumber","columnNumber","className","pl","_pl$images","_pl$images$","onClick","id","images","url","src","alt","_c","$RefreshReg$"],"sources":["/Users/dheyhasan/spotify-analyzer/SA-frontend/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { fetchPlaylists, fetchPlaylistTracks } from \"../api/spotify.js\";\nimport Header from \"../components/Header.js\";\n\n// every thing above is just impot not need to explin */\n\n// Ceate Dashboard function as arrow functions  */\n\nconst Dashboard = () => {\n  // Create couple of varibale and assign them to useState which mean date need to be track in the app\n\n  const [playlists, setPlaylists] = useState([]);\n  const [selectedTracks, setSelectedTracks] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n\n  // useNavigate is a hook that allows you to move to other pages\n\n  const navigate = useNavigate();\n\n  // useEffect is a hook that allows you to run side effects in your component\n\n  // The empty array means this effect will only run once when the component mounts\n\n  // The function fetchPlaylists is called to get the playlists from the Spotify API\n\n  // The token is stored in localStorage and is used to authenticate the request\n\n  // If the token is not found, a warning is logged and loaded is set to true\n\n  // If the token is found, the playlists are fetched and set in the state\n\n  // If there is an error, it is logged and loaded is set to true\n\n  useEffect(() => {\n    // This is a side effect that runs when the component mounts\n\n    const token = localStorage.getItem(\"spotifyAccessToken\");\n    if (token) {\n      fetchPlaylists(token)\n        .then((data) => {\n          setPlaylists(data);\n          setLoaded(true);\n        })\n        .catch((err) => {\n          console.error(\"Error fetching playlists:\", err);\n          setLoaded(true);\n        });\n    } else {\n      console.warn(\"No token found\");\n      setLoaded(true);\n    }\n  }, []);\n\n  const handleSelect = async (playlistId) => {\n    const token = localStorage.getItem(\"spotifyAccessToken\");\n    if (!token) return;\n\n    try {\n      const tracks = await fetchPlaylistTracks(token, playlistId);\n      setSelectedTracks(tracks);\n\n      const response = await fetch(\"http://localhost:8000/analyze\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(\n          tracks.map((t) => ({\n            name: t.name,\n            duration_ms: t.duration_ms,\n            popularity: t.popularity,\n          }))\n        ),\n      });\n\n      const analysisData = await response.json();\n      console.log(\"ANALYSIS DATA FROM BACKEND:\", analysisData);\n\n      navigate(\"/analysis\", {\n        state: {\n          analysisData,\n          selectedTracks: tracks,\n        },\n      });\n    } catch (err) {\n      console.error(\"Error fetching tracks or analyzing:\", err);\n    }\n  };\n\n  return (\n    <>\n      <Header />\n      <div className=\"p-4\">\n        <h1 className=\"text-2xl font-bold\">Your Spotify Dashboard</h1>\n        <p className=\"mt-2\">Here you can view and analyze your playlists.</p>\n\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 mt-4\">\n          {playlists.map((pl) => (\n            <div\n              key={pl.id}\n              className=\"border rounded-lg overflow-hidden shadow hover:shadow-lg cursor-pointer\"\n              onClick={() => {\n                console.log(\"Clicked playlist:\", pl.name);\n                handleSelect(pl.id);\n              }}\n            >\n              {pl.images?.[0]?.url && (\n                <img\n                  src={pl.images[0].url}\n                  alt={pl.name}\n                  className=\"w-full h-40 object-cover\"\n                />\n              )}\n              <div className=\"p-2\">\n                <h3 className=\"font-semibold text-sm\">{pl.name}</h3>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}